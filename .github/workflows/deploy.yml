name: Deploy Angular App to EC2

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  APP_NAME: voltioapp

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadless

      - name: Build application
        run: npm run build -- --configuration=production

      - name: Create deployment artifact
        run: |
          tar -czf voltio-build.tar.gz -C dist/${{ env.APP_NAME }} .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: voltio-build
          path: voltio-build.tar.gz
          retention-days: 5

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: voltio-build

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Create backup of current deployment
          if [ -d "/var/www/voltio" ] && [ "$(ls -A /var/www/voltio)" ]; then
            sudo cp -r /var/www/voltio /var/www/voltio-backup-$(date +%Y%m%d_%H%M%S)
            echo "‚úÖ Backup created"
          fi
          
          # Ensure directory exists and has correct ownership
          sudo mkdir -p /var/www/voltio
          sudo chown -R www-data:www-data /var/www/voltio
          
          # Clean current deployment but preserve directory structure
          sudo find /var/www/voltio -mindepth 1 -delete 2>/dev/null || true
          
          # Verify directory is ready
          echo "üìÅ Directory prepared: /var/www/voltio"
          ls -la /var/www/voltio      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: voltio-build.tar.gz
          target: /tmp/

    - name: Extract and setup files
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Extract files to temporary location first
          cd /tmp
          echo "üì¶ Extracting Angular application..."
          
          # Create temporary extraction directory
          mkdir -p /tmp/voltio-extract
          tar -xzf voltio-build.tar.gz -C /tmp/voltio-extract/
          
          # Verify extraction
          echo "üìã Extracted files:"
          ls -la /tmp/voltio-extract/
          
          # Copy files to web directory
          echo "üìÅ Copying files to web directory..."
          sudo cp -r /tmp/voltio-extract/* /var/www/voltio/
          
          # Ensure index.html exists
          if [ ! -f "/var/www/voltio/index.html" ]; then
            echo "‚ùå ERROR: index.html not found after extraction!"
            echo "Files in /var/www/voltio:"
            ls -la /var/www/voltio/
            exit 1
          fi
          
          # Set proper permissions
          echo "üîß Setting permissions..."
          sudo chown -R www-data:www-data /var/www/voltio
          sudo chmod -R 755 /var/www/voltio
          sudo find /var/www/voltio -type f -exec chmod 644 {} \;
          
          # Verify final state
          echo "‚úÖ Final verification:"
          echo "Directory ownership: $(stat -c '%U:%G' /var/www/voltio)"
          echo "Directory permissions: $(stat -c '%a' /var/www/voltio)"
          echo "Index.html exists: $([ -f /var/www/voltio/index.html ] && echo 'YES' || echo 'NO')"
          echo "Index.html size: $([ -f /var/www/voltio/index.html ] && stat -c '%s bytes' /var/www/voltio/index.html || echo 'N/A')"
          
          # Test Nginx configuration
          echo "üîß Testing Nginx configuration..."
          if sudo nginx -t; then
            echo "‚úÖ Nginx configuration is valid"
            sudo systemctl reload nginx
            echo "üîÑ Nginx reloaded successfully"
          else
            echo "‚ùå Nginx configuration error!"
            exit 1
          fi
          
          # Local connectivity test
          echo "üîç Testing local connectivity..."
          sleep 2
          if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200"; then
            echo "‚úÖ Local server responding with 200 OK"
          else
            response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
            echo "‚ö†Ô∏è Local server response code: $response_code"
          fi
          
          # Clean up temporary files
          rm -rf /tmp/voltio-extract /tmp/voltio-build.tar.gz
          
          echo "üéâ Deployment completed successfully!"  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful to https://voltio.acstree.xyz"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi
